if (length(getvariable("main__", "")) == 0 or getvariable("main__", "") == currentscriptname) {
    ?currentscriptname;
        
    switchtodesign;
    groupscope("::Root Element");
    deleteall;
    clear;
    main__ = currentscriptname;

    lambda = 1550e-9;
    gap = 100e-9;
    pwr = 1e-3;    
    rev_direction = false;

    extra_waveguide = true;
    record_all = true;
    annotate_all = 6;
}
## Only Change N and M for crossbar array with a custom size of MxN
## Change lambda for different wavelengths
## Change pwr to adjust laser power

create_dpuc_multiplier;
create_dpuc_laser;

x_off = 0;
y_off = 0;

## Laser Sources
for (i = 1:N) {
    name = "L_0_" + num2str(i);
    select("mod_laser_main");
    copy();
    set("name", name);
    rotateelement(name);
    setnamed(name, "enabled", true);
    setnamed(name, "x position", x_off + i*200);
    setnamed(name, "y position", y_off);
    setnamed(name, "power", pwr_N);
    setnamed(name, "input", floor(rand*10)/10);
    setnamed(name, "annotate", annotate_all >= 1);
}
for (i = 1:M) {
    name = "L_" + num2str(i) + "_0";
    select("mod_laser_main");
    copy();
    set("name", name);
    setnamed(name, "enabled", true);
    setnamed(name, "x position", x_off);
    setnamed(name, "y position", y_off + i*200);
    setnamed(name, "power", pwr_M);
    setnamed(name, "input", floor(rand*10)/10);
    setnamed(name, "annotate", annotate_all >= 1);
}

# Add Unit Cells
for (i = 1:M) {
    for (j=1:N) {
        mul_name = "DPUC_" + num2str(i) + "_" + num2str(j); 
        ocs_name = "OSC_" + num2str(i) + "_" + num2str(j);        
        
        select("multipler_main");
        copy();
        set("name", mul_name);
        addelement("Oscilloscope");
        set("name", ocs_name);
        
        setnamed(mul_name, "enabled", true);
        setnamed(mul_name, "x position", x_off + j*200);
        setnamed(mul_name, "y position", y_off + i*200);  
        setnamed(mul_name, "H_k", 1/(N+1-j));
        setnamed(mul_name, "V_k", 1/(M+1-i));
        setnamed(mul_name, "annotate", annotate_all >= 1);
        
        setnamed(ocs_name, "x position", x_off + j*200 + 110);
        setnamed(ocs_name, "y position", y_off + i*200 - 75);
        setnamed(ocs_name, "annotate", annotate_all >= 6);
        flipelement(ocs_name);  rotateelement(ocs_name);
    }
}

for (i = 1:M) {
    for (j=1:N) {
        mul_name = "DPUC_" + num2str(i) + "_" + num2str(j); 
        ocs_name = "OSC_" + num2str(i) + "_" + num2str(j);
        
        connect(mul_name, "out_e1", ocs_name, "input");
        if (i == 1) {
            connect("L_" + num2str(i-1) + "_" + num2str(j), "out_o1", "DPUC_1_" + num2str(j), "in_o2");
        } else {
            connect("DPUC_" + num2str(i-1) + "_" + num2str(j), "out_o2", mul_name, "in_o2");
        }
        if (j == 1) {
            connect("L_" + num2str(i) + "_" + num2str(j-1), "out_o1", "DPUC_" + num2str(i) + "_1", "in_o1");
        } else {
            connect("DPUC_" + num2str(i) + "_" + num2str(j-1), "out_o1", mul_name, "in_o1");
        }
    }
}


# Analyzers
for (i = 1:M) {
    name = "L__" + num2str(i);
    addelement("Optical Oscilloscope");
    set("name", "OOSC_" + name);
    addelement("Optical Spectrum Analyzer");
    set("name", "OSA_" + name);
    addelement("Optical Power Meter");
    set("name", "OPM_" + name);
    
    setnamed("OOSC_" + name, "x position", x_off + N*200 + 200);
    setnamed("OOSC_" + name, "y position", y_off + i*200 + 16);
    setnamed("OSA_" + name, "x position", x_off + N*200 + 300);
    setnamed("OSA_" + name, "y position", y_off + i*200 + 16);
    setnamed("OPM_" + name, "x position", x_off + N*200 + 400);
    setnamed("OPM_" + name, "y position", y_off + i*200 + 16);
    setnamed("OOSC_" + name, "annotate", annotate_all >= 6);
    setnamed("OSA_" + name, "annotate", annotate_all >= 6);
    setnamed("OPM_" + name, "annotate", annotate_all >= 6);
    connect("DPUC_" + num2str(i) + "_" + num2str(N), "out_o1", "OOSC_" + name, "input");
    connect("DPUC_" + num2str(i) + "_" + num2str(N), "out_o1", "OSA_" + name, "input");
    connect("DPUC_" + num2str(i) + "_" + num2str(N), "out_o1", "OPM_" + name, "input");
}
for (i = 1:N) {
    name = "L_" + num2str(i) + "_";
    addelement("Optical Oscilloscope");
    set("name", "OOSC_" + name);
    addelement("Optical Spectrum Analyzer");
    set("name", "OSA_" + name);
    addelement("Optical Power Meter");
    set("name", "OPM_" + name);
    select("mod_laser_main");
    
    rotateelement("OOSC_" + name);
    rotateelement("OSA_" + name);
    rotateelement("OPM_" + name);
    setnamed("OOSC_" + name, "x position", x_off + i*200 + 16);
    setnamed("OOSC_" + name, "y position", y_off + M*200 + 200);
    setnamed("OSA_" + name, "x position", x_off + i*200 + 16);
    setnamed("OSA_" + name, "y position", y_off + M*200 + 300);
    setnamed("OPM_" + name, "x position", x_off + i*200 + 16);
    setnamed("OPM_" + name, "y position", y_off + M*200 + 400);
    setnamed("OOSC_" + name, "annotate", annotate_all >= 6);
    setnamed("OSA_" + name, "annotate", annotate_all >= 6);
    setnamed("OPM_" + name, "annotate", annotate_all >= 6);
    connect("DPUC_" + num2str(M) + "_" + num2str(i), "out_o2", "OOSC_" + name, "input");
    connect("DPUC_" + num2str(M) + "_" + num2str(i), "out_o2", "OSA_" + name, "input");
    connect("DPUC_" + num2str(M) + "_" + num2str(i), "out_o2", "OPM_" + name, "input");
}


select("multipler_main");
delete;
select("mod_laser_main");
delete;


if (getvariable("main__", "") == currentscriptname) {
    main__ = "";
}
